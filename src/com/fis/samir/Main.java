/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fis.samir;

import java.awt.Color;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author Samir
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
//    setContentPane (new JLabel(new ImageIcon(ImageIO.read(new File("test.jpg")))));
    int i = 1, j = 0;
    List listLingVarValue = new ArrayList();
    List listD = new ArrayList();

    private boolean checkTxtSize = false;
    private boolean checkTxtStart = false;
    private boolean checkTxtEnd = false;
    private boolean checkTxtCombo = false;
    private boolean checkTxtCustom = false;

    public Main() {
        setResizable(false);
        try {
            setIconImage(ImageIO.read(getClass().getResource("/img/math.jpg")));
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        
                System.out.println(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(Calendar.getInstance().getTime()));

        /////////COmbo box
        comboType.addItem("Choose");
        comboType.addItem("Regular");
        comboType.addItem("Randomly");
        comboType.addItem("Custom");
        comboType.setSelectedItem("Regular");

        //custom
        lblCustom.setVisible(false);
        txtCustom.setVisible(false);
//        btnSet.setVisible(false);

        txtsize.setText("5");
        txtsize.setEditable(false);
        setLocationRelativeTo(this);
    }

    public List reflectPiece(List data, float start, float end, float size) {
        List list = new ArrayList();
        float elementD;
        for (int index = 0; index <= size; index++) {
            if (index < data.size()) {
                elementD = Float.parseFloat(data.get(index).toString());
                list.add((float) ((elementD - start) / (end - start)));
            }
        }
        return list;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblStart = new javax.swing.JLabel();
        lblEnd = new javax.swing.JLabel();
        lblCustom = new javax.swing.JLabel();
        btnInsert = new javax.swing.JButton();
        txtsize = new javax.swing.JTextField();
        txtStart = new javax.swing.JTextField();
        txtEnd = new javax.swing.JTextField();
        txtCustom = new javax.swing.JTextField();
        comboType = new javax.swing.JComboBox();
        btnSet = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Size");

        jLabel2.setText("Type");

        lblStart.setText("Start");

        lblEnd.setText("End");

        lblCustom.setText("[d0,d1]");

        btnInsert.setText("Calculate");
        btnInsert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInsertMouseClicked(evt);
            }
        });
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });
        btnInsert.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnInsertKeyPressed(evt);
            }
        });

        txtsize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsizeKeyReleased(evt);
            }
        });

        comboType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTypeActionPerformed(evt);
            }
        });

        btnSet.setText("Set");
        btnSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(lblStart)
                    .addComponent(lblEnd)
                    .addComponent(lblCustom))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtCustom)
                        .addGap(5, 5, 5)
                        .addComponent(btnSet))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtsize, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboType, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStart, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(48, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnInsert)
                .addGap(119, 119, 119))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStart)
                    .addComponent(txtStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEnd)
                    .addComponent(txtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(txtCustom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSet)
                        .addComponent(lblCustom)))
                .addGap(15, 15, 15)
                .addComponent(btnInsert)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Quality of Communication Services");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:
        if (!txtsize.getText().equals("")) {
            txtsize.setBackground(Color.white);
            txtsize.setForeground(Color.black);
            checkTxtSize = true;
        } else if ("".equals(txtsize.getText().trim())) {
            checkTxtSize = false;
            txtsize.setForeground(Color.black);
            txtsize.setBackground(Color.yellow);
        }
        if (!txtStart.getText().equals("")) {
            checkTxtStart = true;
            txtStart.setBackground(Color.white);
            txtStart.setForeground(Color.black);
        } else if ("".equals(txtStart.getText().trim())) {
            checkTxtStart = false;
            txtStart.setForeground(Color.black);
            txtStart.setBackground(Color.yellow);
        }
        if (!txtEnd.getText().equals("")) {
            checkTxtEnd = true;
            txtEnd.setBackground(Color.white);
            txtEnd.setForeground(Color.black);
        } else if ("".equals(txtEnd.getText().trim())) {
            checkTxtEnd = false;
            txtEnd.setForeground(Color.black);
            txtEnd.setBackground(Color.yellow);
        }
        if (!comboType.getSelectedItem().equals("Choose")) {
            checkTxtCombo = true;
            comboType.setBackground(Color.white);
            comboType.setForeground(Color.black);
        } else if ("Choose".equals(comboType.getSelectedItem().toString().trim())) {
            checkTxtCombo = false;
            comboType.setForeground(Color.black);
            comboType.setBackground(Color.yellow);
        }
        if (comboType.getSelectedItem().toString().equals("Custom")) {
            if (!txtCustom.getText().equals("")) {
                checkTxtCustom = true;
                txtCustom.setBackground(Color.white);
                txtCustom.setForeground(Color.black);
            } else if ("".equals(txtCustom.getText().trim())) {
                checkTxtCustom = false;
                txtCustom.setForeground(Color.black);
                txtCustom.setBackground(Color.yellow);
            }
        } else {
            checkTxtCustom = true;
        }

        if (checkTxtSize && checkTxtStart && checkTxtEnd && checkTxtCombo && checkTxtCustom) {
            float start = Float.valueOf(txtStart.getText().trim());
            float end = Float.valueOf(txtEnd.getText().trim());
            int size = Integer.valueOf(txtsize.getText().trim());
            float temp;
            if (start > end) {
                temp = start;
                start = end;
                end = temp;
            } else if (start == end) {
                try {
                    JOptionPane.showMessageDialog(null, "Please  difference start and end");
                    System.exit(1);
                } catch (Exception ex) {
                }
            }
            if (comboType.getSelectedItem().equals("Regular")) {
                float incr = (float) (end - start) / size;
                System.out.println("interval " + incr);
                for (float jj = start; jj <= end; jj += incr) {
                    listD.add(jj);
                }
                if (listD.size() < (size + 1) && Math.round(end - incr) < (end - incr)) {
                    listD.add(end);
                }
//                System.out.println("start : " + start);
//                System.out.println("end : " + end);
//                System.out.println("size :" + size);
//                System.out.println(" D = REGULAR" + listD + "  size  " + listD.size());
//                System.out.println("[0,1] parcasina inikas  : " + reflectPiece(listD, start, end, size) + "  size : " + reflectPiece(listD, start, end, size).size());
                String ss = "";
                ss += "start : " + start + "\n" + "end : " + end + "\n" + " D = REGULAR" + listD + "  size  " + listD.size() + "\n"
                        + "[0,1] parcasina inikas  : " + reflectPiece(listD, start, end, size) + "  size : " + reflectPiece(listD, start, end, size).size();
                JOptionPane.showMessageDialog(this, ss, "", JOptionPane.INFORMATION_MESSAGE);
                new Operations().calculateGaussianMemFunc(reflectPiece(listD, start, end, size));
            } else if (comboType.getSelectedItem().equals("Randomly")) {
                Random rand = new Random();
                float rIncr = rand.nextFloat() * ((end - start) / size);
                int count = 0;
                loop:
                for (float j1 = start; j1 <= end; j1 += rIncr) {
                    rIncr = rand.nextFloat() * ((end - start) / size);
                    count++;
                    if (count == size + 1) {
                        listD.add(end);
                        break;
                    }
                    listD.add(j1);
                }
//                System.out.println(" D = RANDOMLY" + listD + "  size  " + listD.size());
//                System.out.println("[0,1] parcasina inikas  : " + reflectPiece(listD, start, end, size) + "  size : " + reflectPiece(listD, start, end, size).size());
                String ss = "";
                ss += "start : " + start + "\n" + "end : " + end + "\n" + " D = RANDOMLY" + listD + "  size  " + listD.size() + "\n"
                        + "[0,1] parcasina inikas  : " + reflectPiece(listD, start, end, size) + "  size : " + reflectPiece(listD, start, end, size).size();
                JOptionPane.showMessageDialog(this, ss, "", JOptionPane.INFORMATION_MESSAGE);
                new Operations().calculateGaussianMemFunc(reflectPiece(listD, start, end, size));
            } else if (comboType.getSelectedItem().equals("Custom")) {
//                System.out.println(" D = CUSTOMLY" + listD + "  size  " + listD.size());
//                System.out.println("[0,1] parcasina inikas  : " + reflectPiece(listD, start, end, size) + "  size : " + reflectPiece(listD, start, end, size).size());
                String ss = "";
                ss += "start : " + start + "\n" + "end : " + end + "\n" + " D = CUSTOMLY" + listD + "  size  " + listD.size() + "\n"
                        + "[0,1] parcasina inikas  : " + reflectPiece(listD, start, end, size) + "  size : " + reflectPiece(listD, start, end, size).size();
                JOptionPane.showMessageDialog(this, ss, "", JOptionPane.INFORMATION_MESSAGE);
                new Operations().calculateGaussianMemFunc(reflectPiece(listD, start, end, size));
            }

            ///// IMPLICATIV RULES
//        String result = Rules.doChoose(listLingVarValue.get(0).toString(), listLingVarValue.get(1).toString(), listLingVarValue.get(2).toString(), listLingVarValue.get(3).toString());
//        JOptionPane.showMessageDialog(this, result, "", JOptionPane.INFORMATION_MESSAGE);
            setDefaultCloseOperation(EXIT_ON_CLOSE);
//            ProcessBuilder pb = new ProcessBuilder("C:\\Program Files (x86)\\Notepad++\\notepad++.exe", System.getProperty("user.home") + "\\Desktop\\FIS.txt");
//            try {
////                pb.start();
//            } catch (IOException ex) {
//                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//            }
            setVisible(false);
            System.exit(1);
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void txtsizeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsizeKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtsizeKeyReleased

    private void comboTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTypeActionPerformed
        // If Regular or Randomly
//        if (comboType.getSelectedItem().equals("Regular") || comboType.getSelectedItem().equals("Randomly")) {
//            lblStart.setVisible(true);
//            txtStart.setVisible(true);
//            lblEnd.setVisible(true);
//            txtEnd.setVisible(true);
//        } else {
//            lblStart.setVisible(false);
//            txtStart.setVisible(false);
//            lblEnd.setVisible(false);
//            txtEnd.setVisible(false);
//        }

        if (comboType.getSelectedItem().equals("Custom")) {
            lblCustom.setVisible(true);
            txtCustom.setVisible(true);
            btnSet.setVisible(true);
            listD.add(0, txtStart.getText());
        } else {
            btnSet.setVisible(false);
            lblCustom.setVisible(false);
            txtCustom.setVisible(false);
        }


    }//GEN-LAST:event_comboTypeActionPerformed

    private void btnSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetActionPerformed
        // TODO add your handling code here:
        if (comboType.getSelectedItem().toString().equals("Custom")) {
            if (!txtCustom.getText().equals("")) {
                checkTxtCustom = true;
                txtCustom.setBackground(Color.white);
                txtCustom.setForeground(Color.black);
            } else if ("".equals(txtCustom.getText().trim())) {
                checkTxtCustom = false;
                txtCustom.setForeground(Color.black);
                txtCustom.setBackground(Color.yellow);
            }
        }
        if (checkTxtCustom) {
            float size = Float.valueOf(txtsize.getText());
            System.out.println("j = " + j);
            if (j < (size - 1)) {
                lblCustom.setText("[d" + j + " , d" + (j + 1) + "]");
                listD.add(txtCustom.getText());
                txtCustom.setText(null);
            } else {
                listD.add(txtEnd.getText());
                System.out.println(listD);
                JOptionPane.showMessageDialog(this, "Finished!", "", JOptionPane.INFORMATION_MESSAGE);
            }
            j++;
        }

    }//GEN-LAST:event_btnSetActionPerformed

    private void btnInsertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnInsertMouseClicked

    private void btnInsertKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnInsertKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnInsertKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnSet;
    private javax.swing.JComboBox comboType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCustom;
    private javax.swing.JLabel lblEnd;
    private javax.swing.JLabel lblStart;
    private javax.swing.JTextField txtCustom;
    private javax.swing.JTextField txtEnd;
    private javax.swing.JTextField txtStart;
    private javax.swing.JTextField txtsize;
    // End of variables declaration//GEN-END:variables
}
